//package converter; // NetBeans IDE

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;
import javax.imageio.ImageIO;

/**
 * txtMaker. Creates and edits a new txt file containing calculated data.
 * 
 * @author Emilio E, Phillip N, Kai W.
 * @version 20.October.2018
 */
public class txtMaker 
{
    // weights (lbs)
    double dist, totalAfterCollection, finalTotal;
    double waste = 0, stMary = 0, tefap = 0, grocery = 0, corp = 0, church = 0, individual = 0, start = 0;
    double totalCollected = 0;
    
    int totalDonees = 0, clients = 0;
    
    public txtMaker(ArrayList<Donor> donorList, ArrayList<Donee> doneeList, File prevMonth)
    {
        
        clients = doneeList.size();
        
        try
        {

            Scanner inputStream = new Scanner(prevMonth);
            String lastLine = inputStream.nextLine();
            
            for(int i = 0 ; i < 15 ; i++) {
                
                lastLine = inputStream.nextLine();
                
            }
            
            lastLine = lastLine.replace("Total:\t\t\t\t","");
            start = Double.parseDouble(lastLine);
            inputStream.close();

        } catch (FileNotFoundException ex)
        {

            System.out.println("File does not exist.");
        
        }
        
        for(Donor donor : donorList)
        {
        
            if(donor.getLastName().toUpperCase().equals("WASTE"))
            {
                
                waste += donor.getWeight();
                totalCollected -= donor.getWeight();
                
            }
            else if(donor.getFirstName().toUpperCase().contains("ST. MARY"))
            {
                
                totalCollected += donor.getWeight();
                stMary += donor.getWeight();
            
            }
            else if(donor.getFirstName().toUpperCase().contains("TEFAP"))
            {
                
                totalCollected += donor.getWeight();
                tefap += donor.getWeight();
            
            }
            else if(donor.getFirstName().contains("#"))
            {
                totalCollected += donor.getWeight();
                grocery += donor.getWeight();
            }
            else if(donor.getDonationSource().toUpperCase().contains("BUSINESS"))
            {
                
                totalCollected += donor.getWeight();
                corp += donor.getWeight();
            
            }
            else if(donor.getDonationSource().toUpperCase().contains("CHURCH"))
            {
                
                totalCollected += donor.getWeight();
                church += donor.getWeight();
            
            }
            else if(donor.getDonationSource().toUpperCase().contains("INDIVIDUAL"))
            {
                
                totalCollected += donor.getWeight();
                individual += donor.getWeight();
                
            }
        
        }
        
        for(Donee donee : doneeList)
        {
                
            totalDonees += donee.getHouseHoldTotal();
                
        }
        
        dist = clients * 40;
        
        totalAfterCollection = start + totalCollected;
        
        finalTotal = totalAfterCollection - waste - dist;
        
    }
    
    Rectangle a = new Rectangle(0, 0, 800, 800);
    BufferedImage bImage = new BufferedImage(800,800,BufferedImage.TYPE_INT_RGB);
    Graphics2D g = bImage.createGraphics();
    
    public void setStart(double in)
    {
        start = in;
    }
    
    public void sourcePieChart(ArrayList<Donor> donorList, String folderLocation)
    {
        Color[] color = {Color.blue, Color.green, Color.orange, Color.red, Color.magenta, Color.yellow};
        double[] percent = {grocery, individual, corp, church, tefap, stMary};
        String[] name = {"Grocery Store","Individual","Corperate/Organization","Church","TEFAP","St. Mary's - senior food box"};
        
        PieChartMaker sourcePieChart = new PieChartMaker();
        PieChart[] chart = sourcePieChart.createChart(6, color, percent, name);
        sourcePieChart.createChart(6, color, percent, name);
        sourcePieChart.drawChart(g, a, chart);
        RenderedImage rImage = bImage;
        File imageFile = new File(folderLocation + File.separator + "sourcePie"+donorList.get(0).getMonthYear()+"_"+donorList.get(donorList.size() - 1).getMonthYear()+".jpg");
        
        try 
            {
				ImageIO.write(rImage, "jpg", imageFile);
			} 
            catch (IOException e) 
            {
				e.printStackTrace();
			}
    }
    public void wastePieChart(ArrayList<Donor> donorList, String folderLocation)
    {
        Color[] color = {Color.green, Color.black};
        double[] percent = {dist, waste};
        String[] name = {"Distributed", "waste"};
                
        PieChartMaker sourcePieChart = new PieChartMaker();
        PieChart[] chart = sourcePieChart.createChart(2, color, percent, name);
        sourcePieChart.createChart(2, color, percent, name);
        sourcePieChart.drawChart(g, a, chart);
        RenderedImage rImage = bImage;
        File imageFile = new File(folderLocation + File.separator + "wastePie"+donorList.get(0).getMonthYear()+"_"+donorList.get(donorList.size() - 1).getMonthYear()+".jpg");
        
        try 
            {
				ImageIO.write(rImage, "jpg", imageFile);
			} 
            catch (IOException e) 
            {
				e.printStackTrace();
			}
    }
    public String saveTXT(String folderLocation, ArrayList<Donor> donorList)
    {
     
        String fileName = "";
        
        try
        {
            
            fileName = donorList.get(0).getMonthYear() + "_" + donorList.get(donorList.size() - 1).getMonthYear() + ".txt";
            File file = new File(folderLocation + File.separator +  fileName);
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            try (PrintWriter outFile = new PrintWriter(bw)) {
                outFile.println("Starting Inventory:\t\t" + start);
                outFile.println("Number of Clients:\t\t" + clients);
                outFile.println("Total Served:\t\t\t" + totalDonees);
                outFile.println("Distributed:\t\t\t" + dist);
                outFile.println();
                outFile.println("Inventory " + donorList.get(0).getDonatedOn() + "-" + donorList.get(donorList.size() - 1).getDonatedOn());
                outFile.println("----------------------------------------");
                outFile.println("Grocery Store:\t\t\t" + grocery);
                outFile.println("Individual:\t\t\t" + individual);
                outFile.println("Corperate/Organization:\t\t" + corp);
                outFile.println("Church:\t\t\t\t" + church);
                outFile.println("TEFAP:\t\t\t\t" + tefap);
                outFile.println("St. Mary's - senior food box:\t" + stMary);
                outFile.println("Total:\t\t\t\t" + totalAfterCollection);
                outFile.println("Waste (minus):\t\t\t" + waste);
                outFile.println("Total:\t\t\t\t" + finalTotal);
                
                
            }
            
        }
        catch(IOException e)
        {
            System.out.print("IOException");
        }
        
        return(fileName);
        
    }
    
}
